<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NIM游戏</title>
      <link href="/2020/09/11/nim-you-xi/"/>
      <url>/2020/09/11/nim-you-xi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>学习自<a href="https://web.stanford.edu/class/cs97si/05-combinatorial-games.pdf" target="_blank" rel="noopener">斯坦福大学算法测试课程</a></p></blockquote><h2 id="简单游戏"><a href="#简单游戏" class="headerlink" title="简单游戏"></a>简单游戏</h2><p>$n$ 个石头放置在一起。两个玩家轮流移走1个或3个石头。移走最后那个石头的玩家获胜，如果两个玩家都玩的很好，找出胜者。</p><h3 id="动态规划求解（DP）"><a href="#动态规划求解（DP）" class="headerlink" title="动态规划求解（DP）"></a>动态规划求解（DP）</h3><p>自底向上求解，当 $n$ 较小时：</p><table><thead><tr><th align="center">$n$</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th></tr></thead><tbody><tr><td align="center">$W/L$</td><td align="center">L</td><td align="center">W</td><td align="center">L</td><td align="center">W</td><td align="center">L</td><td align="center">W</td><td align="center">L</td><td align="center">W</td></tr></tbody></table><p><strong>猜想：</strong> 如果 $n$ 是奇数，第一个玩家获胜。如果 $n$ 是偶数，第二个玩家获胜。</p><p><strong>证明：</strong> 当 $n=0$ 时，成立。</p><p>​            当 $n$ 是奇数时，可以移走一个石头，留给对手偶数个石头。</p><p>​            当 $n$ 是偶数时，无论怎么做，留给对手奇数个石头。</p><h2 id="MiniMax-Algorithm"><a href="#MiniMax-Algorithm" class="headerlink" title="MiniMax Algorithm"></a>MiniMax Algorithm</h2><p>给定状态下，决定当前玩家最优移动的递归算法。当前玩家在状态 $S$ 下的最优分数定义为 $f(S)$。从 $S$ 移动一步得到的状态为 $T_1, T_2, \dots, T_m$。$T$ 代表 $f(T_i)$ 最小的状态。那么，$f(s) = -f(T)$ 。即，最小化对手的分数，最大化自己的分数。</p><p><strong>伪代码：</strong> </p><ul><li><p>给定状态 $S$ ，计算 $f(S)$ </p></li><li><p>如果已经知道 $f(S)$ , 直接返回</p></li><li><p>设置返回值 $x \leftarrow - \infty$</p></li><li><p>对每一个有效的下个状态 $T$:</p><ul><li>更新返回值 $x \leftarrow max{x, -f(T)}$</li></ul></li><li><p>将 $f(S) = x $ 存下来，并且返回 $x$</p></li></ul><h2 id="NIM游戏或拈游戏"><a href="#NIM游戏或拈游戏" class="headerlink" title="NIM游戏或拈游戏"></a>NIM游戏或拈游戏</h2><p>有 $n$ 堆石头，两个玩家轮流选择一堆石头，并且从中移走任意数量石头。拿走最后那个石头的玩家获胜。如果两个玩家都玩的很好，找出胜者。</p><blockquote><p>当石头堆的数量很多时，不能使用动态规划，因为状态空间很大。</p></blockquote><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li><p>给定堆的大小 $n_1, n_2, \dots, n_m$</p></li><li><p>第一个玩家获胜的充分必要条件是 $n_1 \oplus n_2 \oplus \cdots \oplus n_m$ 的结果非零。$\oplus$ 是异或运算。</p></li></ul><p><strong>原因：</strong>  </p><ul><li><p>如果异或和为0，那么无论当前玩家怎么做，下个状态的异或和不为0。</p></li><li><p>如果异或和非0，那么可以使它变为0 </p></li></ul><h2 id="Grundy-Numbers"><a href="#Grundy-Numbers" class="headerlink" title="Grundy Numbers"></a>Grundy Numbers</h2><p>当有多个游戏存在时，两个玩家轮流选择一个游戏进行移动，当不能移动时失败。怎么计算胜者呢？</p><ul><li>对每个游戏，计算出它的Grundy number</li><li>第一个玩家获胜的条件是所有的Grundy number的异或和为非零值。<ul><li>例如，当拈游戏只有一堆时，G数等于那堆石头的数量。</li></ul></li></ul><p><strong>G数计算方法:</strong></p><p>从 $S$ 移动一步得到的状态为 $T_1, T_2, \dots, T_m$。状态 $S$ 的G数 $g(S)$ 是一个不会在 ${g(T_1), g(T_2), \dots, g(T_m)}$ 中出现的最小非负整数。</p><ul><li>Note：失败状态的G数是0</li></ul><h3 id="Example1"><a href="#Example1" class="headerlink" title="Example1"></a>Example1</h3><p>只有一堆石头的拈游戏，$g(0)=0$ ,因为这是个必输的状态。状态1只能到达状态0，因此 $g(1)$ 是不会在 ${g(0)}={0}$ 中出现的最小非负整数，即 $g(1) = 1$ 。同样地，$g(2)=2, g(3) =3$ 。这个游戏的G数是$g(n) =n$。</p><h3 id="Example2"><a href="#Example2" class="headerlink" title="Example2"></a>Example2</h3><p>和Example1的区别在于每次只能移走1个或2个石头。</p><p>G数表：</p><table><thead><tr><th align="center">$n$</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th></tr></thead><tbody><tr><td align="center">$g(n)$</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">0</td><td align="center">1</td></tr></tbody></table><p>对于只有一堆的情况，计算G数可能并不需要。但当有 $n$ 堆时，可以计算每堆的G数，然后计算异或。</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ul><li>如果状态空间较小，使用内存暂存数据，如计算斐波那契数列时可以保存重复使用的一些数据。</li><li>否则，通过一些测试数据找出模式，如Example2。</li><li>努力把博弈论转化成类似于拈游戏。</li><li>当多个游戏同时进行时，使用G数。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发入门</title>
      <link href="/2020/08/12/wei-xin-xiao-cheng-xu-kai-fa-ru-men/"/>
      <url>/2020/08/12/wei-xin-xiao-cheng-xu-kai-fa-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用和Vue.js语法相似的<a href="https://wepyjs.github.io/wepy-docs/1.x/#/" target="_blank" rel="noopener">WePy脚手架框架 1.x版本</a>，便于入手，学习成本低。组件使用<a href="https://youzan.github.io/vant-weapp/#/quickstart" target="_blank" rel="noopener">Vant Weapp</a>，其中包含大量已实现的组件，如复选框、下拉菜单等。其余API调用等参考<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener">微信开发文档</a>。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="0-技术选型"><a href="#0-技术选型" class="headerlink" title="0 技术选型"></a><strong>0 技术选型</strong></h3><p>1.wepy 框架（腾讯开发的一款小程序框架）（官网：<a href="https://wepyjs.github.io/wepy-docs/1.x/#/" target="_blank" rel="noopener">https://wepyjs.github.io/wepy-docs/1.x/#/</a>      1.x版本）</p><p>2.安装脚手架 wepy-cli</p><pre class="line-numbers language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">//查看版本</span>npm ls <span class="token operator">-</span>g <span class="token operator">--</span>depth<span class="token operator">=</span><span class="token number">0</span><span class="token comment" spellcheck="true">//卸载 wepy-cli</span>npm uninstall <span class="token operator">-</span>g wepy<span class="token operator">-</span>cli<span class="token comment" spellcheck="true">//安装特定版本 @1.7.2</span>npm install <span class="token operator">-</span>g wepy<span class="token operator">-</span><span class="token label symbol">cli@</span><span class="token number">1.7</span><span class="token punctuation">.</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.小程序组件库  选用 Vant Weapp  小程序 UI 组件库 （官网：<a href="https://youzan.github.io/vant-weapp/#/intro" target="_blank" rel="noopener">https://youzan.github.io/vant-weapp/#/intro</a>）</p><p> <code>npm i @vant/weapp</code></p><p>该项目的使用方法：</p><ol><li>访问 <code>vant-weapp</code> 的 Github 主页 <a href="https://github.com/youzan/vant-weapp" target="_blank" rel="noopener">https://github.com/youzan/vant-weapp</a></li><li>点击 <code>Clone or Download</code> 按钮</li><li>选择 <code>Download ZIP</code></li><li>解压下载的 <code>vant-weapp-dev.zip</code></li><li>进入解压后的目录，将 <code>lib</code> 目录重命名为 <code>vant</code></li><li>把重命名为 <code>vant</code> 的目录，复制到 <code>src -&gt; assets</code> 目录中</li></ol><p>将 vant 中的徽章组件注册为全局组件</p><ol><li>打开 <code>app.wpy</code> 文件</li><li>在 <code>config</code> 节点内，新增 <code>usingComponents</code> 节点，具体代码如下：<pre class="line-numbers language-js"><code class="language-js">config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 引用并注册全局组件</span> usingComponents<span class="token punctuation">:</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 徽章组件</span>   <span class="token string">'van-badge'</span><span class="token punctuation">:</span> <span class="token string">'./assets/vant/badge/index'</span><span class="token punctuation">,</span>   <span class="token string">'van-badge-group'</span><span class="token punctuation">:</span> <span class="token string">'./assets/vant/badge-group/index'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="1-初始化项目"><a href="#1-初始化项目" class="headerlink" title="1 初始化项目"></a>1 初始化项目</h3><ol><li><p>运行 <code>wepy init standard myproject</code>命令，初始化小程序项目  </p><p>注：1.7.0 之前的版本使用 <code>wepy new myproject</code></p></li><li><p>运行 <code>cd myproject</code> 进入项目根目录</p></li><li><p>运行 <code>npm install</code> 安装所有依赖项</p></li><li><p>运行 <code>wepy build --watch</code> 命令，开启 wepy 项目的实时编译功能</p></li><li><p>打开微信开发者工具，加载 wepy 项目并查看效果</p></li><li><p>解决 ESLint 语法报错问题</p></li></ol><h3 id="2-梳理项目结构"><a href="#2-梳理项目结构" class="headerlink" title="2 梳理项目结构"></a>2 梳理项目结构</h3><ol><li>清理并重置 <code>src -&gt; pages -&gt; index.wpy</code> 首页</li><li>在根目录的 <code>.prettierrc</code> 配置文件内，新增 <code>&quot;semi&quot;: false</code> 配置，防止每次格式化代码，添加分号的问题</li><li>清理并重置 <code>src -&gt; app.wpy</code> 中的代码，将 <code>style</code> 和 <code>script</code> 标签中，不必要的代码删除掉</li><li>清空 <code>src -&gt; components</code> 和 <code>src -&gt; mixins</code> 目录</li><li>将梳理完毕后的项目，上传至码云</li></ol><h3 id="3-绘制-tabBar（小程序菜单栏）"><a href="#3-绘制-tabBar（小程序菜单栏）" class="headerlink" title="3 绘制 tabBar（小程序菜单栏）"></a>3 绘制 tabBar（小程序菜单栏）</h3><ol><li><p>新建 <code>src -&gt; pages -&gt; tabs</code> 文件夹，用来存放所有 tabBar 相关的页面</p></li><li><p>删除 <code>src -&gt; pages -&gt; index.wpy</code> 页面，并在 <code>tabs</code> 目录中，新建 <code>home.wpy</code>，<code>cates.wpy</code>，<code>search.wpy</code>，<code>cart.wpy</code>，<code>me.wpy</code> 五个 tabBar 相关的页面</p></li><li><p>将页面路径，记录到 <code>src -&gt; app.wpy</code> 文件的 <code>config -&gt; pages</code> 节点中，示例代码如下：</p><pre class="line-numbers language-js"><code class="language-js">pages<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token string">'pages/tabs/home'</span><span class="token punctuation">,</span>  <span class="token string">'pages/tabs/cates'</span><span class="token punctuation">,</span>  <span class="token string">'pages/tabs/search'</span><span class="token punctuation">,</span>  <span class="token string">'pages/tabs/cart'</span><span class="token punctuation">,</span>  <span class="token string">'pages/tabs/me'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>新建 <code>src -&gt; assets</code> 目录，并将素材中的 <code>icons</code> 文件夹，拷贝到项目 <code>src -&gt; assets</code> 目录中</p></li><li><p>在 <code>src -&gt; app.wpy</code> 文件中，新增 <code>tabBar</code> 节点，并做如下配置：</p><pre class="line-numbers language-js"><code class="language-js">tabBar<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 选中的文本颜色</span>  selectedColor<span class="token punctuation">:</span> <span class="token string">'#D81E06'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// tabBar 的列表</span>  list<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 页面路径</span>      pagePath<span class="token punctuation">:</span> <span class="token string">'pages/tabs/home'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 显示的文本</span>      text<span class="token punctuation">:</span> <span class="token string">'首页'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 默认图标</span>      iconPath<span class="token punctuation">:</span> <span class="token string">'/assets/icons/home.png'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 选中图标</span>      selectedIconPath<span class="token punctuation">:</span> <span class="token string">'/assets/icons/home-active.png'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      pagePath<span class="token punctuation">:</span> <span class="token string">'pages/tabs/cates'</span><span class="token punctuation">,</span>      text<span class="token punctuation">:</span> <span class="token string">'分类'</span><span class="token punctuation">,</span>      iconPath<span class="token punctuation">:</span> <span class="token string">'/assets/icons/cates.png'</span><span class="token punctuation">,</span>      selectedIconPath<span class="token punctuation">:</span> <span class="token string">'/assets/icons/cates-active.png'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      pagePath<span class="token punctuation">:</span> <span class="token string">'pages/tabs/search'</span><span class="token punctuation">,</span>      text<span class="token punctuation">:</span> <span class="token string">'搜索'</span><span class="token punctuation">,</span>      iconPath<span class="token punctuation">:</span> <span class="token string">'/assets/icons/search.png'</span><span class="token punctuation">,</span>      selectedIconPath<span class="token punctuation">:</span> <span class="token string">'/assets/icons/search-active.png'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      pagePath<span class="token punctuation">:</span> <span class="token string">'pages/tabs/cart'</span><span class="token punctuation">,</span>      text<span class="token punctuation">:</span> <span class="token string">'购物车'</span><span class="token punctuation">,</span>      iconPath<span class="token punctuation">:</span> <span class="token string">'/assets/icons/cart.png'</span><span class="token punctuation">,</span>      selectedIconPath<span class="token punctuation">:</span> <span class="token string">'/assets/icons/cart-active.png'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      pagePath<span class="token punctuation">:</span> <span class="token string">'pages/tabs/me'</span><span class="token punctuation">,</span>      text<span class="token punctuation">:</span> <span class="token string">'我的'</span><span class="token punctuation">,</span>      iconPath<span class="token punctuation">:</span> <span class="token string">'/assets/icons/my.png'</span><span class="token punctuation">,</span>      selectedIconPath<span class="token punctuation">:</span> <span class="token string">'/assets/icons/my-active.png'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="4-修改导航栏样式"><a href="#4-修改导航栏样式" class="headerlink" title="4 修改导航栏样式"></a>4 修改导航栏样式</h3><p>打开 <code>src -&gt; app.wpy</code> 文件，找到 <code>window</code> 节点，并配置如下：</p><pre class="line-numbers language-js"><code class="language-js">window<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 页面背景色</span>  backgroundTextStyle<span class="token punctuation">:</span> <span class="token string">'dark'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 导航条背景色</span>  navigationBarBackgroundColor<span class="token punctuation">:</span> <span class="token string">'#D81E06'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 导航条标题文本</span>  navigationBarTitleText<span class="token punctuation">:</span> <span class="token string">'Title you setted'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 导航条标题文字颜色</span>  navigationBarTextStyle<span class="token punctuation">:</span> <span class="token string">'white'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="为异步-API-启用-Promise-功能"><a href="#为异步-API-启用-Promise-功能" class="headerlink" title="为异步 API 启用 Promise 功能"></a>为异步 API 启用 Promise 功能</h2><ol><li><p>打开 <code>src -&gt; app.wpy</code> 文件</p></li><li><p>找到 constructor() 构造函数</p></li><li><p>在构造函数的最后，新增如下代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'requestfix'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 通过下面这一行代码，可以为异步的API，</span>    <span class="token comment" spellcheck="true">// 开启Promise功能，这样，异步API调用的结果，返回值是Promise对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'promisify'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="1-把页面的业务逻辑抽离到单独的-mixin-文件中"><a href="#1-把页面的业务逻辑抽离到单独的-mixin-文件中" class="headerlink" title="1 把页面的业务逻辑抽离到单独的 mixin 文件中"></a>1 把页面的业务逻辑抽离到单独的 <code>mixin</code> 文件中</h3><blockquote><p><em>Mixin 混合</em>   (<a href="https://wepyjs.github.io/wepy-docs/1.x/#/?id=mixin-混合" target="_blank" rel="noopener">https://wepyjs.github.io/wepy-docs/1.x/#/?id=mixin-混合</a>)</p></blockquote><blockquote><p>对于组件<code>data</code>数据，<code>components</code>组件，<code>events</code>事件以及其它自定义方法采用<strong>默认式混合</strong>，即如果组件未声明该数据，组件，事件，自定义方法等，那么将混合对象中的选项将注入组件这中。对于组件已声明的选项将不受影响。</p></blockquote><p>为了精简每个小程序页面的代码，可以将 script 中的业务逻辑，抽离到对应的 mixin 文件中，具体步骤：</p><ol><li><p>在 <code>src -&gt; mixins</code> 文件夹中，新建与页面路径对应的 <code>.js</code> 文件，并初始化基本的代码结构如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> wepy <span class="token keyword">from</span> <span class="token string">'wepy'</span><span class="token comment" spellcheck="true">// 注意，必须继承自 wepy.mixin</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> wepy<span class="token punctuation">.</span>mixin <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在对应的页面中，可以导入并使用对应的 mixin，具体代码如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> wepy <span class="token keyword">from</span> <span class="token string">'wepy'</span><span class="token comment" spellcheck="true">// 1. 导入外界的 mixin 文件，并接受</span><span class="token comment" spellcheck="true">// @ 就代表 src 这一层路径</span><span class="token keyword">import</span> mix <span class="token keyword">from</span> <span class="token string">'@/mixins/tabs/home.js'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> wepy<span class="token punctuation">.</span>page <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 2. 把导入的 mix 对象，挂载到 mixins 这个数据中就行</span>  mixins <span class="token operator">=</span> <span class="token punctuation">[</span>mix<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-封装-baseToast-函数提示错误消息"><a href="#2-封装-baseToast-函数提示错误消息" class="headerlink" title="2 封装 baseToast 函数提示错误消息"></a>2 封装 <code>baseToast</code> 函数提示错误消息</h3><ol><li><p>为了提高项目的维护性、可用性、扩展性，可以将常用的 js 逻辑，封装到 <code>src -&gt; baseAPI.js</code> 文件中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> wepy <span class="token keyword">from</span> <span class="token string">'wepy'</span><span class="token comment" spellcheck="true">/** * 弹框提示一个无图标的 Toast 消息 * @str 要提示的消息内容 */</span>wepy<span class="token punctuation">.</span>baseToast <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>str <span class="token operator">=</span> <span class="token string">'获取数据失败！'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  wepy<span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span> str<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 弹框期间不会携带任何图标</span>    icon<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>    duration<span class="token punctuation">:</span> <span class="token number">1500</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>app.wpy</code> 中导入执行 <code>baseAPI.js</code> 文件中的代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">import</span> wepy <span class="token keyword">from</span> <span class="token string">'wepy'</span>    <span class="token keyword">import</span> <span class="token string">'wepy-async-function'</span>    <span class="token comment" spellcheck="true">// 导入并执行 baseAPI.js 中的所有代码</span>    <span class="token keyword">import</span> <span class="token string">'@/baseAPI.js'</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>latex公式编号</title>
      <link href="/2020/07/31/latex-gong-shi-bian-hao/"/>
      <url>/2020/07/31/latex-gong-shi-bian-hao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转载自<a href="https://yuxtech.github.io/tex/latex%E5%85%AC%E5%BC%8F%E7%BC%96%E5%8F%B7%E6%8A%80%E5%B7%A7.pdf" target="_blank" rel="noopener">多行公式的编号技巧</a><br><a href="https://yuxtech.github.io/tex/amsmath.pdf" target="_blank" rel="noopener">amsmath使用手册</a></p></blockquote><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h2 id="1-多行公式一个编号"><a href="#1-多行公式一个编号" class="headerlink" title="1 多行公式一个编号"></a>1 多行公式一个编号</h2><p>在换行的公式中,如果直接用 <strong>align</strong> 环境会给每行都编号, <strong>align*</strong> 环境则每一行都没<br>有编号.但是我们可以用\notag命令指定某些行不编号,如</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">align</span><span class="token punctuation">}</span><span class="token equation string">a&amp;=b+c<span class="token equation-command regex">\notag</span><span class="token equation-command regex">\\</span>a^2&amp;=b^2+c^2<span class="token equation-command regex">\\</span>a^3&amp;=b^3+c^3<span class="token equation-command regex">\notag</span></span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">align</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva4.sinaimg.cn/large/005zOmEdly1gh9ywsbynkj308d03pa9v.jpg" alt="1"><br>除了用 align 环境之外,我们还可以用次环境 aligned 来更好地实现这种效果</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">align</span><span class="token punctuation">}</span><span class="token equation string"><span class="token equation-command regex">\begin</span>{aligned}a&amp;=b+c<span class="token equation-command regex">\\</span>a^2&amp;=b^2+c^<span class="token equation-command regex">\end</span>{aligned}</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">align</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tvax1.sinaimg.cn/large/005zOmEdly1gh9yx5zgvtj308b02z3ya.jpg" alt="2"></p><p>aligned 环境可以看成一个盒子,我们还可以给这个盒子添加定界符</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">align</span><span class="token punctuation">}</span><span class="token equation string"><span class="token equation-command regex">\left</span><span class="token equation-command regex">\{</span><span class="token equation-command regex">\begin</span>{aligned}&amp;a=b+c<span class="token equation-command regex">\\</span>&amp;a^2=b^2+c^<span class="token equation-command regex">\end</span>{aligned}<span class="token equation-command regex">\right</span></span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">align</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva2.sinaimg.cn/large/005zOmEdly1gh9yxcqtfmj308503ga9u.jpg" alt="3"><br>指定不同块按等号对齐,同时每个区块一个编号,这时用 split 次环境</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">align</span><span class="token punctuation">}</span><span class="token equation string">a+b&amp;=b+c<span class="token equation-command regex">\\</span><span class="token equation-command regex">\begin</span>{split}a&amp;=b+c<span class="token equation-command regex">\\</span>a^2&amp;=b^2+c^<span class="token equation-command regex">\end</span>{split}<span class="token equation-command regex">\\</span><span class="token equation-command regex">\begin</span>{split}a&amp;=b+c<span class="token equation-command regex">\\</span>a^2&amp;=b^2+c^<span class="token equation-command regex">\end</span>{split}</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">align</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva4.sinaimg.cn/large/005zOmEdly1gh9yxietpej308c07imx0.jpg" alt="4"><br>一行两个公式两个编号,这种情况自然需要 minipage 环境支持了.</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">minipage</span><span class="token punctuation">}</span><span class="token punctuation">{</span>0.5<span class="token function selector">\textwidth</span><span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">equation</span><span class="token punctuation">}</span><span class="token equation string">a^2+b^2=c^</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">equation</span><span class="token punctuation">}</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">minipage</span><span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">minipage</span><span class="token punctuation">}</span><span class="token punctuation">{</span>0.5<span class="token function selector">\textwidth</span><span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">equation</span><span class="token punctuation">}</span><span class="token equation string">a^3=b^3+c^</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">equation</span><span class="token punctuation">}</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">minipage</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva2.sinaimg.cn/large/005zOmEdly1gh9yxsmri7j30go01dmwz.jpg" alt="5"><br>给带定界符的方程组的每一行都编号,这种情况 <strong>amsmath</strong> 包无法实现,我们可以用<br><strong>cases</strong> 包的 <strong>numcases</strong> 环境</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token comment" spellcheck="true">%\usepackage{cases}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">numcases</span><span class="token punctuation">}</span><span class="token punctuation">{</span>f(x)=<span class="token punctuation">}</span><span class="token comment" spellcheck="true">%f(x)=可以置空</span>1,<span class="token punctuation">&amp;</span><span class="token equation string">$x<span class="token equation-command regex">\in</span><span class="token equation-command regex">\mathbb</span> Q$</span><span class="token function selector">\\</span>0,<span class="token punctuation">&amp;</span><span class="token equation string">$x<span class="token equation-command regex">\notin</span><span class="token equation-command regex">\mathbb</span> Q$</span><span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">numcases</span><span class="token punctuation">}</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tva3.sinaimg.cn/large/005zOmEdly1gh9yxyy21xj308603fwea.jpg" alt="6"></p><p>不过上述 <strong>numcases</strong> 环境的效果是不尽如人意的,更好的效果是用 <strong>empheq</strong> 包,它可<br>以给 <strong>amsmath</strong> 包提供的数学环境添加各种定界符.</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">empheq</span><span class="token punctuation">}</span><span class="token punctuation">[</span>left=<span class="token function selector">\empheqlbrace</span>,right=<span class="token function selector">\empheqrbrack</span><span class="token punctuation">]</span><span class="token punctuation">{</span>align<span class="token punctuation">}</span><span class="token punctuation">&amp;</span>a=b+c<span class="token punctuation">&amp;</span><span class="token punctuation">&amp;</span>a=b<span class="token function selector">\\</span><span class="token punctuation">&amp;</span>a^2=b^2+c^2<span class="token punctuation">&amp;</span><span class="token punctuation">&amp;</span>a=b<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">empheq</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://tvax1.sinaimg.cn/large/005zOmEdly1gh9yy4ido6j308b02ddfn.jpg" alt="7"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Shadowsocks搭建配置</title>
      <link href="/2020/07/28/shadowsockets/"/>
      <url>/2020/07/28/shadowsockets/</url>
      
        <content type="html"><![CDATA[<ul><li><p><code>apt install python python-pip python-m2crypto</code></p></li><li><p>安装shadowsocks</p><ul><li><code>pip install shadowsocks</code></li></ul></li><li><p>配置文件/etc/shadowsocks/config.json</p><ul><li><p>单用户  </p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>      <span class="token property">"server"</span><span class="token operator">:</span><span class="token string">"ip"</span><span class="token punctuation">,</span>      <span class="token property">"server_port"</span><span class="token operator">:</span><span class="token number">8888</span><span class="token punctuation">,</span>      <span class="token property">"local_address"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>      <span class="token property">"local_port"</span><span class="token operator">:</span><span class="token number">1080</span><span class="token punctuation">,</span>      <span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"123456789"</span><span class="token punctuation">,</span>      <span class="token property">"timeout"</span><span class="token operator">:</span><span class="token number">300</span><span class="token punctuation">,</span>      <span class="token property">"method"</span><span class="token operator">:</span><span class="token string">"rc4-md5"</span><span class="token punctuation">,</span>      <span class="token property">"fast_open"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"workers"</span><span class="token operator">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span>  ```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>多用户 </p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>      <span class="token property">"server"</span><span class="token operator">:</span><span class="token string">"ip"</span><span class="token punctuation">,</span>      <span class="token property">"local_address"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>      <span class="token property">"local_port"</span><span class="token operator">:</span><span class="token number">1080</span><span class="token punctuation">,</span>      <span class="token property">"port_password"</span><span class="token operator">:</span><span class="token punctuation">{</span>          <span class="token property">"8888"</span><span class="token operator">:</span><span class="token string">"20181023"</span><span class="token punctuation">,</span>          <span class="token property">"9001"</span><span class="token operator">:</span><span class="token string">"mimawhat"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"timeout"</span><span class="token operator">:</span><span class="token number">300</span><span class="token punctuation">,</span>      <span class="token property">"method"</span><span class="token operator">:</span><span class="token string">"rc4-md5"</span><span class="token punctuation">,</span>      <span class="token property">"fast_open"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"workers"</span><span class="token operator">:</span> <span class="token number">2</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>启动/停止shadowsocks</p><ul><li><code>ssserver -c /etc/shadowsocks/config.json -d start</code>  #可写在脚本中</li><li><code>ssserver -d stop</code></li></ul></li><li><p>优化配置</p><ul><li><code>vim /etc/security/limits.conf</code>  <ul><li>soft nofile 51200  </li><li>hard nofile 51200</li></ul></li><li><code>ulimit -n 51200</code></li><li><code>vim /etc/sysctl.conf</code>  <ul><li><pre><code>fs.file-max = 51200  net.core.rmem_max = 67108864  net.core.wmem_max = 67108864  net.core.netdev_max_backlog = 250000  net.core.somaxconn = 4096  net.ipv4.tcp_syncookies = 1  net.ipv4.tcp_tw_reuse = 1  net.ipv4.tcp_tw_recycle = 0  net.ipv4.tcp_fin_timeout = 30  net.ipv4.tcp_keepalive_time = 1200  net.ipv4.ip_local_port_range = 10000 65000  net.ipv4.tcp_max_syn_backlog = 8192  net.ipv4.tcp_max_tw_buckets = 5000  net.ipv4.tcp_fastopen = 3  net.ipv4.tcp_mem = 25600 51200 102400  net.ipv4.tcp_rmem = 4096 87380 67108864  net.ipv4.tcp_wmem = 4096 65536 67108864  net.ipv4.tcp_mtu_probing = 1  net.ipv4.tcp_congestion_control = hybla</code></pre></li></ul></li><li><code>sysctl -p</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
            <tag> shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客初始化</title>
      <link href="/2020/07/28/init/"/>
      <url>/2020/07/28/init/</url>
      
        <content type="html"><![CDATA[<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>安装稳定版，否则不支持hexo deploy。</p><p><strong>添加镜像源</strong>：<code>npm config set registry https://registry.npm.taobao.org</code></p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p><code>npm i hexo-cli -g</code></p><p><code>npm i hexo-deployer-git</code> #发布扩展</p><h2 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h2><p>npm install hexo -g #安装Hexo<br>npm update hexo -g #升级<br>hexo init #初始化博客</p><p>命令简写<br>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo g == hexo generate #生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy #部署</p><p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>在blog根目录里的_config.yml文件称为<strong>站点</strong>配置文件。根目录里的themes文件夹，里面也有个_config.yml文件，这个称为<strong>主题</strong>配置文件</p><h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><h3 id="gitalk"><a href="#gitalk" class="headerlink" title="gitalk"></a>gitalk</h3><p>在主题的_config.yml文件中，设置gitalk的Client ID、Client Secret。由Github的OAuth Application提供，<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">链接</a></p><h3 id="valine"><a href="#valine" class="headerlink" title="valine"></a>valine</h3><p>详情见<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a></p><h2 id="文件开头"><a href="#文件开头" class="headerlink" title="文件开头"></a>文件开头</h2><p>title: 文章标题<br>catalog: 是否显示段落目录<br>date: 文章日期<br>subtitle: 子标题<br>header-img: 顶部背景图片<br>top: 是否置顶<br>tags: 标签<br>categories: 分类</p>]]></content>
      
      
      <categories>
          
          <category> blog相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog写作 </tag>
            
            <tag> blog发布 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大经典排序算法整理汇总（附代码）</title>
      <link href="/2020/02/16/sort-algorithms/"/>
      <url>/2020/02/16/sort-algorithms/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转载自<a href="https://godweiyang.com/" target="_blank" rel="noopener">韦阳的博客</a> ,用作写作模板，在此感谢他的辛苦付出。<br>大家可以关注他的公众号【算法码上来】，每日算法干货马上就来！</p></blockquote><!-- ![](/medias/contact.jpg) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p><p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p><p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href="https://leetcode-cn.com/problems/sort-an-array/" title="LeetCode 912. 排序数组" target="_blank" rel="noopener">LeetCode 912. 排序数组</a> 这道题。</p><h2 id="性质汇总"><a href="#性质汇总" class="headerlink" title="性质汇总"></a>性质汇总</h2><blockquote><p>如果发现表中有错误，请留言告知。</p></blockquote><table><thead><tr><th>算法</th><th>最好</th><th>最坏</th><th>平均</th><th>空间</th><th align="center">稳定性</th><th align="center">是否基于比较</th></tr></thead><tbody><tr><td>冒泡排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>选择排序</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>插入排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>快速排序</td><td>$O(n\log n)$</td><td>$O(n^2)$</td><td>$O(n\log n)$</td><td>$O(\log n)$~$O(n)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>归并排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>希尔排序</td><td>$O(n^{1.3})$</td><td>$O(n^2)$</td><td>$O(n\log n)$~$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>计数排序</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>基数排序</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>桶排序</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n+m)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>堆排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr></tbody></table><blockquote><p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p></blockquote><p><img src="1.png" alt="十大经典排序算法性质汇总"></p><h3 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p><p><strong>冒泡排序</strong><br><a href="https://en.wikipedia.org/wiki/Bubble_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bubble_sort</a></p><p><strong>选择排序</strong><br><a href="https://en.wikipedia.org/wiki/Selection_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Selection_sort</a></p><p><strong>插入排序</strong><br><a href="https://en.wikipedia.org/wiki/Insertion_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Insertion_sort</a></p><p><strong>快速排序</strong><br><a href="https://en.wikipedia.org/wiki/Quicksort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Quicksort</a></p><p><strong>归并排序</strong><br><a href="https://en.wikipedia.org/wiki/Merge_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Merge_sort</a></p><p><strong>希尔排序</strong><br><a href="https://en.wikipedia.org/wiki/Shellsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Shellsort</a></p><p><strong>计数排序</strong><br><a href="https://en.wikipedia.org/wiki/Counting_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Counting_sort</a></p><p><strong>基数排序</strong><br><a href="https://en.wikipedia.org/wiki/Radix_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Radix_sort</a></p><p><strong>桶排序</strong><br><a href="https://en.wikipedia.org/wiki/Bucket_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bucket_sort</a></p><p><strong>堆排序</strong><br><a href="https://en.wikipedia.org/wiki/Heapsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Heapsort</a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p><p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 冒泡排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token number">-2</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 选择排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">selectSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    idx <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 插入排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">insertSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 快速排序（24 ms）</span>    <span class="token keyword">void</span> <span class="token function">qSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">quickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序（192 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> rnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rnums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序 + 非递归（80 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSortNR</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> n<span class="token operator">-</span>len<span class="token punctuation">;</span> l <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span>len<span class="token number">-1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token operator">-</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 希尔排序（40 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">shellSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j<span class="token operator">-</span>gap <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-</span><span class="token operator">=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计数排序（32 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">countSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> maxv<span class="token operator">-</span>minv<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span>minv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 基数排序（不适用于负数）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">radixSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxv <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxv <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            maxd<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rank</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxd <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                rank<span class="token punctuation">[</span><span class="token operator">--</span>count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            maxd<span class="token operator">--</span><span class="token punctuation">;</span>            base <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 桶排序 (20 ms)</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bucketSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bs <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>maxv<span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">bucket</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bucket<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 堆排序（32 ms）</span>    <span class="token keyword">void</span> <span class="token function">adjust</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c2 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>c2<span class="token operator">&lt;</span>s <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> c2 <span class="token operator">:</span> c1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">heapSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
